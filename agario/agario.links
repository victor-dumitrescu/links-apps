#
# LISTS
#

fun lsMap(f, l) {
    if (lsEmpty(l)) lsNilF()
    else lsCons(f(lsHead(l)), lsMap(f, lsTail(l)))
}

fun lsFilter(p, l) {
    if (lsEmpty(l)) lsNilF()
    else if (p(lsHead(l))) lsCons(lsHead(l), lsFilter(p, lsTail(l)))
    else lsFilter(p, lsTail(l))
}

fun lsMapIgnore(f, l) {
    if (lsEmpty(l)) ()
    else { var _ = f(lsHead(l)); lsMapIgnore(f, lsTail(l)) }
}

fun lsCatMaybes(l) {
    if (lsEmpty(l)) lsNilF()
    else switch (lsHead(l)) {
        case Just(x) -> lsCons(x, lsCatMaybes(lsTail(l)))
        case Nothing -> lsCatMaybes(lsTail(l))
    }
}

fun lsFoldLeft(f, i, l) {
    if (lsEmpty(l)) i
    else lsFoldLeft(f, f(i, lsHead(l)), lsTail(l))
}

fun lsUnzip(l) {
    switch (lsEmpty(l)) {
        case false -> {var prev_l = lsUnzip(lsTail(l));
                       (lsCons(lsHead(l).1, prev_l.1), lsCons(lsHead(l).2, prev_l.2)) }
        case true -> (lsNilF(), lsNilF())
    }
    # switch (lsEmpty(l)) {
    #     case true -> lsNilF()
    #     case false -> lsCons(lsHead(l))
    # }
}

########

fun floatAbs(a: Float) {
    if (a >= 0.0) a else -.a
}

var pi = 3.141593;

########################################################################

typename Input = [| KeyUp: Int | KeyDown: Int | Cursor: (Int, Int) |];
typename PlayerState = (x: Float, y: Float, mass: Int, colour: (String, String));
typename ScreenState = (x: Float, y: Float, scale: Float);
typename FoodState = (pos: [(Float, Float)], colour: [String]);
typename GameState = (screen: ScreenState, player: PlayerState, food: FoodState);

fun print_input(in_events: [Input]) {
    if (in_events == [])
        ()
    else
        switch (hd(in_events)) {
            case KeyUp(x) -> print("KeyUp " ^^ intToString(x))
            case KeyDown(x) -> print("KeyDown " ^^ intToString(x))
            case Cursor(x,y) -> print("Cursor " ^^ intToString(x) ^^ " " ^^ intToString(y))
        }
}

fun dec_to_hex(d: Int) {
    # only works for 2-digit hex numbers
    var hex = ls([mod(d/16, 16), mod(d, 16)]);
    var hex_str = lsMap(fun(x) {switch(x) {
                                    case "10" -> "A"
                                    case "11" -> "B"
                                    case "12" -> "C"
                                    case "13" -> "D"
                                    case "14" -> "E"
                                    case "15" -> "F"
                                    case x -> x}}, 
                         lsMap(intToString, hex));
    lsHead(hex_str) ^^ lsHead(lsTail(hex_str))
}

fun hsv_to_rgb(h: Float, s: Float, v: Float) {
    var h_i = floatToInt(6.0 *. h);
    var f = (6.0 *. h) -. intToFloat(h_i);
    var p = v *. (1.0 -. s);
    var q = v *. (1.0 -. f *. s);
    var t = v *. (1.0 -. (1.0 -. f) *. s);

    var rgb = switch (h_i) {
                case 0 -> ls([v, t, p])
                case 1 -> ls([q, v, p])
                case 2 -> ls([p, v, t])
                case 3 -> ls([p, q, v])
                case 4 -> ls([t, p, v])
                case 5 -> ls([v, p ,q])
            };
    lsMap(fun(x) {dec_to_hex(floatToInt(256.0 *. x))}, rgb)
}

fun random_colour(h: Float, s:Float, v: Float) {
    # www.martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically
    var h =
        if (h == -.1.0) {
            var grc = 0.618033988749895;
            var gr = (random() +. grc);
            if (gr > 1.0) gr -. 1.0 else gr}
        else
            h;
    var vals = hsv_to_rgb(h, s, v);
    lsFoldLeft(fun(x,y){x^^y}, "#", vals)
}

fun random_colour_player(s: Float, v: Float) {
    var grc = 0.618033988749895;
    var gr = (random() +. grc);
    var h = if (gr > 1.0) gr -. 1.0 else gr; 
    (random_colour(h, s -. 0.2, v +. 0.2), random_colour(h, s, v))
}

fun clear(ctx) {
    jsClearRect(ctx, 0.0, 0.0, jsCanvasWidth(ctx), jsCanvasHeight(ctx))
}

fun keyDown(code, inEvents) {
    fun step(old, inp) {
        if (inp == KeyUp(code)) false
        else if (inp == KeyDown(code)) true
        else old
    }
    
    fold_left(step, false, inEvents)
}

fun cursor(in_events, no_events) {

    fun is_mouse_event(event) {
        switch (event) {
            case Cursor(x,y) -> true
            case _ -> false
        }
    }

    if (in_events == [])
        (-1,-1)
    else {

        # print(intToString(length(filter(is_mouse_event, in_events))));
        var last = hd(in_events);
        switch (last) {
            case Cursor(x,y) -> (x,y)
            case _ -> (-1,-1)
        }
    }
}

fun initialize_food(gameWidth, gameHeight, food_count) {
    var range = lsRange(0, food_count);
    var positions = lsZip(lsMap(fun(x) {intToFloat(gameWidth) *. random()}, range),
                          lsMap(fun(x) {intToFloat(gameHeight) *. random()}, range));
    var colour = lsMap(fun(x) {random_colour(-.1.0, 0.8, 0.9)}, range);
    (pos=positions, colour=colour): FoodState
}

fun player_radius(mass) {
    10.0 *. sqrt(intToFloat(mass)) /. pi
}

fun euclidean_dist((x1, y1), (x2, y2)) {
    sqrt( (x1 -. x2) ^. 2.0 +. (y1 -. y2) ^. 2.0 )
}


fun main() client {

    var logging = false;

    var left_key_code = 37;
    var up_key_code = 38;
    var right_key_code = 39;
    var down_key_code = 40;
    var m_key_code = 77;

    var canvas1 = "canvas1";
    var canvas2 = "canvas2";

    var gameWidth = 2000;
    var gameHeight = 2000;
    var screenWidth = 700;
    var screenHeight = 500;
    var screenWidthFloat = intToFloat(screenWidth);
    var screenHeightFloat = intToFloat(screenHeight);
    var x_offset = screenWidthFloat /. 2.0;
    var y_offset = screenHeightFloat /. 2.0;
    var grid_lines_distance = 30;

    var step = 5.0;
    var base_velocity = 75.0;
    var base_food_count = 450;
    var food_radius = 10.0;
    var screen_state = (x=0.0, y=0.0, scale=0.0): ScreenState;
    var player_state = (x=500.0, y=500.0, mass=20, colour=random_colour_player(0.95, 0.7)): PlayerState;
    var food_state = initialize_food(gameWidth, gameHeight, base_food_count);
    var state = (screen=screen_state, player=player_state, food=food_state): GameState;

    var cached_cursor = (-1,-1);


    fun swap_buffers(main_canvas_node, disp_canvas_node) {
        var ctx = jsGetContext2D(disp_canvas_node);
        jsDrawImage(ctx, main_canvas_node, 0.0, 0.0);

        ignore(domSetStyleAttrFromRef(main_canvas_node, "display", "block"));
        ignore(domSetStyleAttrFromRef(disp_canvas_node, "display", "none"));
        clear(ctx)
    }

    fun draw(state: GameState) {

        var (main_canvas, disp_canvas) = 
            if (domGetStyleAttrFromRef(getNodeById(canvas1), "display") == "none")
                (canvas1, canvas2)
            else
                (canvas2, canvas1);

        var canvas_node = getNodeById(main_canvas);
        var ctx = jsGetContext2D(canvas_node);

        fun draw_grid() {

            jsLineWidth(ctx, 1.0);
            jsStrokeStyle(ctx, "#ddd");

            jsBeginPath(ctx);
            var xs = lsFilter(fun(x) { x > state.player.x -. x_offset &&
                                       x < state.player.x +. x_offset},
                              lsMap(fun(x){ intToFloat(grid_lines_distance * x) },
                                    lsRange(-screenWidth/2/grid_lines_distance, 
                                            (gameWidth+screenWidth/2)/grid_lines_distance)));
            lsMapIgnore(fun(x){ jsMoveTo(ctx, x -. state.player.x +. x_offset, 0.0);
                                jsLineTo(ctx, x -. state.player.x +. x_offset, screenHeightFloat);
                                jsStroke(ctx)},
                                xs);

            var ys = lsFilter(fun(y) { y > state.player.y -. y_offset &&
                                       y < state.player.y +. y_offset},
                              lsMap(fun(y){ intToFloat(grid_lines_distance * y) }, 
                                    lsRange(-screenHeight/2/grid_lines_distance, 
                                            (gameHeight+screenHeight/2)/grid_lines_distance)));
            lsMapIgnore(fun(y){ jsMoveTo(ctx, 0.0, y -. state.player.y +. y_offset);
                                jsLineTo(ctx, screenWidthFloat, y -. state.player.y +. y_offset);
                                jsStroke(ctx)},
                                ys);

            jsClosePath(ctx);
            
        }

        fun draw_food(state: GameState) { #(food_state: FoodState, player_state: PlayerState) {
            var food_state = state.food;
            var player_state = state.player;
            var props = lsZip(food_state.pos, food_state.colour);
            lsMapIgnore(fun(prop){ 
                            jsBeginPath(ctx);
                            jsArc(ctx, (prop.1).1 -. player_state.x +. x_offset, 
                                       (prop.1).2 -. player_state.y +. y_offset,  
                                       food_radius, 0.0, 2.0 *. pi, false);
                            jsSetFillColor(ctx, prop.2);
                            jsFill(ctx);
                            jsLineWidth(ctx, 1.0);
                            jsStrokeStyle(ctx, "grey");
                            jsStroke(ctx)
                        }, lsFilter(fun(prop) { (prop.1).1 > player_state.x -. x_offset -. food_radius &&
                                                (prop.1).1 < player_state.x +. x_offset +. food_radius &&
                                                (prop.1).2 > player_state.y -. y_offset -. food_radius &&
                                                (prop.1).2 < player_state.y +. y_offset +. food_radius
                                              }, props))
        }

        fun draw_player(state: PlayerState) {
            jsBeginPath(ctx);
            jsArc(ctx, screenWidthFloat /. 2.0, screenHeightFloat /. 2.0, 
                  player_radius(state.mass),
                  0.0, 2.0 *. pi, false);
            jsSetFillColor(ctx, state.colour.1);
            jsFill(ctx);
            jsLineWidth(ctx, 3.0);
            jsStrokeStyle(ctx, state.colour.2);
            jsStroke(ctx);

        }

        draw_grid();
        draw_food(state);
        draw_player(state.player);

        swap_buffers(canvas_node, getNodeById(disp_canvas));

        ()
    }

    fun master_proc() {
        fun master_loop(proc_id) {
            proc_id ! (recv().2: Input);  # .2 is the input
            master_loop(proc_id)
        }
        master_loop(recv().1)             # .1 is the process
    }

    var master_proc_id = spawn { master_proc() };

    fun dummy_proc(i) {
        ignore(recv());
        ()
    }

    var dummy_proc_id = spawn { dummy_proc([]: [Input]) };

    fun compute_player_mass(player_state) {
        player_state.mass
    }

    fun compute_player_position(player_state, cursor) {
        var v = base_velocity /. intToFloat(player_state.mass);

        # normalised (wrt screen dimensions) difference in dtsance between player and cursor position
        var delta_x_norm = 2.0 *. (screenWidthFloat /. 2.0 -. intToFloat(cursor.1)) /. screenWidthFloat;
        var delta_y_norm = 2.0 *. (screenHeightFloat /. 2.0 -. intToFloat(cursor.2)) /. screenHeightFloat;
        var dir_x = if (delta_x_norm > 0.0) -.1.0 else 1.0;
        var dir_y = if (delta_y_norm > 0.0) -.1.0 else 1.0;

        if (delta_x_norm == 0.0 && delta_y_norm == 0.0) 
            (x=player_state.x, y=player_state.y, mass=compute_player_mass(player_state), colour=player_state.colour): PlayerState            
        else {
            # compute velocity components depending on ratio of deltas so that total velocity remains constant
            var delta_ratio = if (delta_y_norm == 0.0) 
                                1.0 
                              else 
                                floatAbs(delta_x_norm) /. floatAbs(delta_y_norm);
            var delta_y_p = sqrt( (v ^. 2.0) /. (delta_ratio ^. 2.0 +. 1.0) );
            var delta_x_p = delta_y_p *. delta_ratio;

            var x_p = player_state.x +. dir_x *. delta_x_p;
            var y_p = player_state.y +. dir_y *. delta_y_p;

            # don't update if player is at borders
            var x_new = if (x_p < 0.0) 0.0 else if (x_p > intToFloat(gameWidth)) intToFloat(gameWidth) else x_p;
            var y_new = if (y_p < 0.0) 0.0 else if (y_p > intToFloat(gameHeight)) intToFloat(gameHeight) else y_p;

            (x=x_new, y=y_new, mass=player_state.mass, colour=player_state.colour): PlayerState
        }
    }

    fun update_food(state: GameState) {
        
        # filter out food particles which are eaten by the player and update player mass accordingly
        var player_pos = (state.player.x, state.player.y);
        var zipped_food_p = lsFilter( fun(x) { euclidean_dist(x.1, player_pos) > player_radius(state.player.mass) },
                                      lsZip(state.food.pos, state.food.colour));
        var (food_pos_p, food_colour_p) = lsUnzip(zipped_food_p);

        (player=(x=state.player.x, y=state.player.y, colour=state.player.colour,
                 mass=state.player.mass + (lsLength(state.food.colour) - lsLength(food_colour_p))), 
         screen=state.screen, 
         food=(pos=food_pos_p, colour=food_colour_p)): GameState
    }

    fun update_logic(state: GameState, in_events: [Input], cached_cursor) {
        var left_down = keyDown(left_key_code, in_events);
        var right_down = keyDown(right_key_code, in_events);
        var up_down = keyDown(up_key_code, in_events);
        var down_down = keyDown(down_key_code, in_events);
        var cursor_xy = cursor(in_events, 0);

        master_proc_id ! (dummy_proc_id, KeyDown(-1): Input);   # clear the event queue
        
        var state_new = update_food(state);
        var player_state = state_new.player;

        var cached_cursor_p = if (cursor_xy == (-1,-1)) cached_cursor else cursor_xy;
        var player_state_p = 
            # if (left_down)
            #     (x=player_state.x -. step, y=player_state.y, mass=player_state.mass): PlayerState
            # else if (right_down)
            #     (x=player_state.x +. step, y=player_state.y, mass=player_state.mass): PlayerState
            # else if (up_down)
            #     (x=player_state.x, y=player_state.y -. step, mass=player_state.mass): PlayerState
            # else if (down_down)
            #     (x=player_state.x, y=player_state.y +. step, mass=player_state.mass): PlayerState
            # else if (keyDown(m_key_code, in_events))
            #     (x=player_state.x, y=player_state.y, mass=player_state.mass + 1): PlayerState
            # 
            # else if (not(cursor_xy == (-1,-1))) {
            if (not(cursor_xy == (-1,-1))) {
                
                if (logging) {
                    replaceNode(<span id="mouse_x">{intToXml(cached_cursor_p.1)}</span>,
                                getNodeById("mouse_x"));
                    replaceNode(<span id="mouse_y">{intToXml(cached_cursor_p.2)}</span>,
                                getNodeById("mouse_y"));
                } else ();
            
                # (x=intToFloat(cursor_xy.1), y=intToFloat(cursor_xy.2)): PlayerState }
                compute_player_position(player_state: PlayerState, cursor_xy) }
            else compute_player_position(player_state: PlayerState, cached_cursor_p);
                # (x=player_state.x, y=player_state.y, mass=player_state.mass): PlayerState;

        ((screen=state_new.screen, player=player_state_p, food=state_new.food): GameState, cached_cursor_p)
    }

    fun update_state() {
        fun main_loop(state: GameState) {

            # var i = if (haveMail())
            #             recv()
            #         else {
            #             master_proc_id ! (dummy_proc_id, Cursor(cached_cursor): Input);
            #             recv()
            #         };
            var i = recv();

            var (state_p, cached_cursor_p) = update_logic(state, i, cached_cursor);
            var cached_cursor = if (cached_cursor_p == (-1,-1)) cached_cursor else cached_cursor_p;
            draw(state_p);

            if (logging) {
                replaceNode(<span id="player_x">{floatToXml(state_p.player.x)}</span>,
                            getNodeById("player_x"));
                replaceNode(<span id="player_y">{floatToXml(state_p.player.y)}</span>,
                            getNodeById("player_y"));
            } else ();

            main_loop(state_p)
        }

        # ignore(recv());
        main_loop(state);
        if (not(haveMail())) self() ! ([]: [Input]) else ();
        update_state()
    }

    var update_proc_id = spawn { update_state() };

    fun input_state_loop(i) {
        var r = recv();
        var i = if (not(r == KeyDown(-1))) i ++ [r] else ([]: [Input]);  # reset input when KeyDown(-1)

        if (not(r == KeyDown(-1)))
            update_proc_id ! i
        else ();
        input_state_loop(i)
    }

    var input_proc_id = spawn{ input_state_loop([]: [Input]) };

    fun on_key_down(e) {
        # print(intToString(getCharCode(e)));
        input_proc_id ! (KeyDown(getCharCode(e)): Input);
    }

    fun on_key_up(e) {
        input_proc_id ! (KeyUp(getCharCode(e)): Input);
    }

    fun on_mousemove(e) {
        input_proc_id ! (Cursor((getPageX(e), getPageY(e))): Input);
    }

    master_proc_id ! (input_proc_id, KeyDown(-2): Input);
    
    fun initialize() {
        ignore(recv());

        jsSetOnKeyDown(getNodeById("container"), on_key_down);
        jsSetOnEvent(getNodeById("container"), "keyup", on_key_up, true);
        jsSetOnEvent(getNodeById("container"), "mousemove", on_mousemove, true);

        update_proc_id ! ([]: [Input])
    }

    var initialize_proc_id = spawn{ initialize() };
                #<link rel="stylesheet" href="css/main.css"/>
    page

        <html>
            <head>
                <title>Agar.io</title>
                <style>
                    body {{
                        margin: 0;
                        }}
                </style>
            </head>
            <body>
                <div id="container" tabindex="1"
                    l:onfocus="{initialize_proc_id ! 0}">
                    <canvas id="{canvas1}" height="{intToString(screenHeight)}" width="{intToString(screenWidth)}"/>
                    <canvas id="{canvas2}" height="{intToString(screenHeight)}" width="{intToString(screenWidth)}"/>
                </div>
                Cursor position: <span id="mouse_x"></span> <span id="mouse_y"></span>
                <br/>
                Player position: <span id="player_x"></span> <span id="player_y"></span>
            </body>
        </html>
}

main()